{"version":3,"sources":["components/Search.js","components/Button.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Search","_ref","value","onChange","label","onSubmit","react_default","a","createElement","concat","type","placeholder","esm","Provider","color","className","index_esm","size","Button","onClick","_ref$className","children","largeColumn","width","mediumColumn","Table","list","onDismiss","map","item","key","objectID","style","href","url","target","title","author","points","components_Button","PATH_BASE","React","createContext","PATH_SEARCH","PARAM_SEARCH","PARAM_PAGE","PARAM_HPP","DEFAULT_QUERY","DEFAULT_HPP","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchSearchTopStories","searchTerm","page","arguments","length","undefined","console","log","fetch","then","response","json","result","setSearchTopStories","catch","error","hits","_this$state","state","searchKey","results","oldHits","updatedHits","toConsumableArray","setState","objectSpread","defineProperty","needsToSearchTopStories","id","_this$state2","_results$searchKey","filter","onSearchChange","event","onSearchSubmit","preventDefault","_this2","_this$state3","components_Search","components_Table","Component","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7aabbbc.chunk.js","sourcesContent":["import React from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\n\n// This component file holds the search input box\nconst Search = ({ value, onChange, label, onSubmit }) => (\n  <form onSubmit={onSubmit}>\n    {`${label}: `}\n    <input type='text' value={value} onChange={onChange} placeholder={label}/>\n    <button type='submit'>\n      <IconContext.Provider\n        value={{ color: 'blue', className: 'align-middle' }}\n      >\n        <div>\n          <FaSearch size=\"1.4em\"/>\n        </div>\n      </IconContext.Provider>\n    </button>\n  </form>\n);\n\nexport default Search;\n","import React from 'react'\n\n// BUTTON COMPONENT\nconst Button = ({ onClick, className = \"\", children }) =>\n  <button type=\"button\" className={className} onClick={onClick}>\n    {children}\n  </button>\n\nexport default Button;","import React from 'react'\nimport Button from './Button'\n\n\n// =========================================== //\n//                COMPONENT STYLE             //\nconst largeColumn = {\n    width: '40%',\n  }\n  const mediumColumn = {\n    width: '30%'\n  }\n  const smallColumn = {\n    width: '10%'\n  }\n  // =========================================== //\n\n// TABLE COMPONENT\nconst Table = ({ list, onDismiss }) =>\n  <div className=\"table\">\n    {list.map(item => (\n      <div key={item.objectID} className=\"table-row\">\n        <span style={ largeColumn }>\n          <a href={item.url} target={\"_blank\"}>{item.title}</a>\n        </span>\n        <span style={ mediumColumn }>\n          {item.author}\n        </span>\n        {/* <span style={ smallColumn }>\n          {item.num_comments}\n        </span> */}\n        <span style={{ width: '10%' }}>\n          {`${item.points} pts`}\n        </span>\n        <span style={{ width: '10%'}}>\n          <Button onClick={() => onDismiss(item.objectID)} className=\"button-inline\">\n            Dismiss\n          </Button>\n        </span>\n      </div>\n    ))}\n  </div>\n\nexport default Table;","import React, { Component } from \"react\";\nimport Search from \"./components/Search\"\nimport Table from \"./components/Table\"\nimport Button from \"./components/Button\"\n// import logo from './logo.svg';\nimport \"./App.css\";\n\nconst BackgroundContext = React.createContext(null);\n\n\n// =====  HACKERNEWS URL CONSTATNS AND DEFAULT PARAMETERs ====== //\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';    // CHANGED THIS TO SEARCH BY DATE\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page='\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst DEFAULT_QUERY = 'technology';\nconst DEFAULT_HPP = 100;\n\n// isSearched() is used to filter the list with a (searchTerm) === NO MORE USED\n// const isSearched = searchTerm => item =>\n//   item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      results: null,\n      searchKey: '',  // searchKey is non-fluctant and helps in implemnenting a client-cache\n      searchTerm: DEFAULT_QUERY,\n    };\n\n    console.log(\"STATE\",this.state);\n  }\n\n  // HELPER FUNCTION TO SEARCH FROM [HACKER-NEWS API]\n  fetchSearchTopStories = (searchTerm, page =0) => {\n    console.log(\"... calling HackerNews API\");\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n    .then(response => response.json())\n    .then(result => this.setSearchTopStories(result))   // SET SEARCH RESULT IN THE STATE\n    .catch(error => error);\n  }\n\n  // SETS SEARCH RESULT FROM HACKERNEWS IN THE STATE\n  setSearchTopStories = (result)  =>{\n    const { hits, page } = result;\n    const { searchKey, results } = this.state;\n    const oldHits = results && results[searchKey]\n     ? results[searchKey.hits]\n     : [];\n    const updatedHits = [...oldHits, ...hits ]\n    console.log(result);  // VIEW SEARCH RESULT IN CONSOLE\n    // DONT FOR THE DATA STRUCTURE RETURNED FROM THE HACKERNEWS API\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: {\n          hits: updatedHits,\n          page,\n        }\n      }\n    });\n  }\n\n  // check if result is cached before making  API call\n  needsToSearchTopStories=(searchTerm) =>{\n    return !this.state.results[searchTerm];\n  }\n\n  // handler for 'DISMISS' button in [TABLE-COMPONENT]\n  onDismiss=(id) =>{\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    // update the state\n    this.setState({ \n      results: {\n        ...results, \n        [searchKey]: {hits: updatedHits, page}\n      }\n    });\n  }\n\n  // changes the 'searchTerm' in the state, each time we type in the input field\n  onSearchChange=(event) =>{\n    // 'event' is REACTs systhetic event\n    this.setState({ searchTerm: event.target.value }); // update state to the input text\n  }\n\n  // called when 'SEARCH' button is clicked\n  onSearchSubmit=(event) =>{\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm })\n    if(this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  }\n\n  //  COMPONENT-DID-MOUNT LIFECYCLE\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    // FETCH DATA USING THE NATIVE [FETCH API]\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  // RENDER RENDER REDNER RENDER RENDER\n  render() {\n    const { \n      results, \n      searchTerm, \n      searchKey \n    } = this.state;\n\n    const page = (\n      results && \n      results[searchKey] && \n      results[searchKey].page\n    ) || 0;\n\n    const list = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].hits\n    ) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search \n          value={searchTerm} \n          onChange={this.onSearchChange}\n          onSubmit={this.onSearchSubmit}\n          label=\"Search\"\n          />\n        </div>\n\n        <Table\n          list={list}\n          onDismiss={this.onDismiss}\n        />\n\n        {\n          results &&\n          <div className=\"interactions\">\n            <Button onClick={() => this.fetchSearchTopStories(searchKey, page+1)}>\n              More\n            </Button>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// REACT v16 ERROR BOUNDARY COMPONENT\n// class ErrorBoundary extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>I catch errors in child components</h1>\n//       </div>\n//     )\n//   }\n\n//   componentDidCatch(err, info) {\n\n//   }\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import * as person from './App'\n// import {firstname as oruko, lastname as ikeji} from './App'\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.render(<App />, root);\n\nif(module.hot) {\n    module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}